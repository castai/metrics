// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/v1beta/ingestor_api.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestionAPI_WriteMetrics_FullMethodName = "/metrics.v1beta.IngestionAPI/WriteMetrics"
)

// IngestionAPIClient is the client API for IngestionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IngestionAPI is the gRPC service for ingesting metrics data
type IngestionAPIClient interface {
	// WriteMetrics writes metrics data to the metrics ingestor
	WriteMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteMetricsRequest, WriteMetricsResponse], error)
}

type ingestionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionAPIClient(cc grpc.ClientConnInterface) IngestionAPIClient {
	return &ingestionAPIClient{cc}
}

func (c *ingestionAPIClient) WriteMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteMetricsRequest, WriteMetricsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IngestionAPI_ServiceDesc.Streams[0], IngestionAPI_WriteMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteMetricsRequest, WriteMetricsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestionAPI_WriteMetricsClient = grpc.ClientStreamingClient[WriteMetricsRequest, WriteMetricsResponse]

// IngestionAPIServer is the server API for IngestionAPI service.
// All implementations should embed UnimplementedIngestionAPIServer
// for forward compatibility.
//
// IngestionAPI is the gRPC service for ingesting metrics data
type IngestionAPIServer interface {
	// WriteMetrics writes metrics data to the metrics ingestor
	WriteMetrics(grpc.ClientStreamingServer[WriteMetricsRequest, WriteMetricsResponse]) error
}

// UnimplementedIngestionAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestionAPIServer struct{}

func (UnimplementedIngestionAPIServer) WriteMetrics(grpc.ClientStreamingServer[WriteMetricsRequest, WriteMetricsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WriteMetrics not implemented")
}
func (UnimplementedIngestionAPIServer) testEmbeddedByValue() {}

// UnsafeIngestionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionAPIServer will
// result in compilation errors.
type UnsafeIngestionAPIServer interface {
	mustEmbedUnimplementedIngestionAPIServer()
}

func RegisterIngestionAPIServer(s grpc.ServiceRegistrar, srv IngestionAPIServer) {
	// If the following call pancis, it indicates UnimplementedIngestionAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestionAPI_ServiceDesc, srv)
}

func _IngestionAPI_WriteMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestionAPIServer).WriteMetrics(&grpc.GenericServerStream[WriteMetricsRequest, WriteMetricsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IngestionAPI_WriteMetricsServer = grpc.ClientStreamingServer[WriteMetricsRequest, WriteMetricsResponse]

// IngestionAPI_ServiceDesc is the grpc.ServiceDesc for IngestionAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.v1beta.IngestionAPI",
	HandlerType: (*IngestionAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteMetrics",
			Handler:       _IngestionAPI_WriteMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1beta/ingestor_api.proto",
}
